#!/bin/bash

OUT="eth1" # Имя исходящего интерфейса, смотрящего в интернет.
OUTADDR="" # Адрес исходящего интерфейса
IN="eth0" # Имя входящего интерфейса, смотрящего в локальную сеть
INADDR="192.168.0.1" # Адрес входящего интерфейса
NETWORK="192.168.0.0/16" # Адресация вашей локальной сети
#ANYWHERE="0.0.0.0/0" # Назначение, любое.
PORTS="1024:65535" # Порты, которые считаются локальными
MULTICAST="224.0.0.0/4" # Мультикаст пакеты, если у вас не используется оставьте как есть,
# если используется IP TV тогда надо удалить этот пункт
VPNDEV="tun0"
ADMINS="192.168.0.2" # IP адреса администраторов, имеют полный доступ на сервер, без каких либо ограничений.
IPTABLES="iptables"
##############################################################################################
# Здесь прописаны параметры запуска\остановки\статуса скрипта. лучше не трогайте =)
# Остановка скрипта
case "$1" in
stop)
echo "Shutting down firewall..."

iptables --flush
iptables --delete-chain
iptables --table nat --flush
iptables --table filter --flush
iptables --table nat --delete-chain
iptables --table filter --delete-chain

iptables -t filter -P INPUT ACCEPT
iptables -t filter -P OUTPUT ACCEPT
iptables -t filter -P FORWARD ACCEPT

echo "...done"
;;
status)
echo $"Table: filter"
iptables --list
echo $"Table: nat"
iptables -t nat --list
;;
restart|reload)
$0 stop
$0 start
;;

##############################################################################################
# Запуск скрипта
start)
echo "Starting Firewall..."
echo ""

# Очистка таблиц и цепочек
iptables --flush
iptables --delete-chain
iptables --table nat --flush
iptables --table filter --flush
iptables --table nat --delete-chain
iptables --table filter --delete-chain

# Назначение глобальных политик фаервола
iptables -P INPUT DROP
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -F INPUT
iptables -F OUTPUT
iptables -F FORWARD

# Загружаем модули, для корректной работы VPN, Active ftp, DCC in IRC которые будут идти через нат.
modprobe ip_nat_ftp
modprobe ip_nat_pptp
modprobe ip_conntrack_ftp
modprobe ip_conntrack_irc

# Изменение параметров SYSCTL
# Включение форвардинга
echo 1 > /proc/sys/net/ipv4/ip_forward
# Включение форвардинга для VPN
echo 1 > /proc/sys/net/ipv4/ip_dynaddr
# Увеличение размера очередей
#echo 32000000 > /proc/sys/net/ipv4/netfilter/ip_conntrack_max
# Время ожидания до закрытия соединения
#echo 14400 > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_established
# Время ожидания до посылки FIN пакета
#echo 60 > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_fin_wait
# Время ожидания до посылки FIN пакета
#echo 10 > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_syn_sent
# Для защиты от syn флуда
echo 1 > /proc/sys/net/ipv4/tcp_syncookies
# Увеличиваем размер backlog очереди
echo 1280 > /proc/sys/net/ipv4/tcp_max_syn_backlog
# Число начальных SYN и SYNACK пересылок для TCP соединения
echo 4 > /proc/sys/net/ipv4/tcp_synack_retries
echo 4 > /proc/sys/net/ipv4/tcp_syn_retries
# Какие порты использовать в качестве локальных TCP и UDP портов
echo "16384 61000" > /proc/sys/net/ipv4/ip_local_port_range
# Сколько секунд ожидать приема FIN до полного закрытия сокета
echo 30 > /proc/sys/net/ipv4/tcp_fin_timeout
# Как часто посылать сообщение о поддержании keep alive соединения
echo 1800 > /proc/sys/net/ipv4/tcp_keepalive_time
# Сколько пакетов проверки keepalive посылать, прежде чем соединение будет закрыто.
echo 2 > /proc/sys/net/ipv4/tcp_keepalive_probes
# Зaпрещаем TCP window scaling
echo 0 > /proc/sys/net/ipv4/tcp_window_scaling
# Запрещаем selective acknowledgements, RFC2018
echo 0 > /proc/sys/net/ipv4/tcp_sack
# Запрещаем TCP timestamps, RFC1323
echo 0 > /proc/sys/net/ipv4/tcp_timestamps
# Уличиваем размер буфера для приема и отправки данных через сокеты.
echo 1048576 > /proc/sys/net/core/rmem_max
echo 1048576 > /proc/sys/net/core/rmem_default
echo 1048576 > /proc/sys/net/core/wmem_max
echo 1048576 > /proc/sys/net/core/wmem_default
# Через какое время убивать соединеие закрытое на нашей стороне
echo 1 > /proc/sys/net/ipv4/tcp_orphan_retries

#arp spoofing defence

# Turn on Source Address Verification in all interfaces to prevent some spoofing attacks.
echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
echo 1 > /proc/sys/net/ipv4/conf/default/rp_filter
#Do not accept ICMP redirects (prevent MITM attacks)
echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects
echo 0 > /proc/sys/net/ipv4/conf/default/accept_redirects
#Ignore ICMP broadcasts will stop gateway from responding to broadcast pings.
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
#Ignore bogus ICMP errors.
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses
#Do not send ICMP redirects.
echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
echo 0 > /proc/sys/net/ipv4/conf/default/send_redirects
#Do not accept IP source route packets.
echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
echo 0 > /proc/sys/net/ipv4/conf/default/accept_source_route
#Turn on log Martian Packets with impossible addresses.
echo 1 > /proc/sys/net/ipv4/conf/all/log_martians
echo 1 > /proc/sys/net/ipv4/conf/default/log_martians
#

##############################################################################################

# IPSET rules
/sbin/ipset -q -R < /etc/sysconfig/ipset.conf
iptables -A INPUT --in-interface $OUT -m set --set ban src -j DROP
iptables -A INPUT --in-interface $OUT -m set --set broot src -j DROP
iptables -A INPUT --in-interface $OUT -m set --set botnet src -j DROP
iptables -A INPUT --in-interface $OUT -m set --set dns src -j DROP
iptables -A INPUT --in-interface $OUT -m set --set dns-ban src -j DROP
iptables -A INPUT --in-interface $OUT -m set --set dns-net src -j DROP
iptables -A INPUT --in-interface $OUT --protocol udp --dport 53 --match state --state NEW --match string --algo kmp --hex-string "|0c 61 70 70 6c 65 74 76 62 6c 6f 67 72 03 63 6f 6d 00|" --from 40 --to 58 --match recent --name DNST --set --jump DROP
iptables -A INPUT --in-interface $OUT --protocol udp --dport 53 --match state --state NEW --match string --algo kmp --hex-string "|03 69 73 63 03 6f 72 67 00 00 ff 00 01|" --from 40 --to 58 --match recent --name DNST --set --jump DROP

iptables -A INPUT -m set --set mailban src -j DROP

######
iptables -t filter -A INPUT -i $OUT -p icmp --icmp-type 3 --src 0/0 --dst $OUTADDR -j ACCEPT
iptables -t filter -A OUTPUT -o $OUT -p icmp  --icmp-type 3 --src $OUTADDR --dst 0/0 -j ACCEPT
iptables -t filter -A INPUT -i $OUT -p icmp --icmp-type 11 --src 0/0 --dst $OUTADDR -j ACCEPT
iptables -t filter -A OUTPUT -o $OUT -p icmp  --icmp-type fragmentation-needed --src $OUTADDR --dst 0/0 -j ACCEPT
iptables -t filter -A OUTPUT -o $OUT -p icmp --icmp-type 11 --src $OUTADDR --dst 0/0 -j ACCEPT

iptables -A INPUT -i $OUT -p udp -m udp --dport 33434:33523 -m state --state NEW -j ACCEPT

$IPTABLES -t filter -A OUTPUT -o $OUT -p udp --src $OUTADDR --sport 32769:65535 --dst 0/0 --dport 33434:33523 -j ACCEPT
$IPTABLES -t filter -A INPUT -i $OUT -p icmp --icmp-type 11 --src 0/0 --dst $OUTADDR -j ACCEPT
$IPTABLES -t filter -A INPUT -i $OUT -p icmp --icmp-type 3 --src 0/0 --dst $OUTADDR -j ACCEPT
#####

#PPTPD input
iptables -A INPUT -p gre -j ACCEPT
iptables -A INPUT -p tcp --dport 1723 -j ACCEPT
#/PPTPD

# Silently Drop Stealth Scans
# All of the bits are cleared
iptables -A INPUT -p icmp --icmp-type timestamp-request -j DROP
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
# SYN and FIN are both set
iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
# SYN and RST are both set
iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
# FIN and RST are both set
iptables -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
# FIN is the only bit set, without the expected accompanying ACK
iptables -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j LOG --log-prefix "Stealth scan: " --log-level 4
iptables -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j DROP
#iptables -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j DROP

# PSH is the only bit set, without the expected accompanying ACK
iptables -A INPUT -p tcp --tcp-flags ACK,PSH PSH -j DROP
# URG is the only bit set, without the expected accompanying ACK
iptables -A INPUT -p tcp --tcp-flags ACK,URG URG -j DROP

##############################################################################################

# Multicast - ignore
iptables -A INPUT -s $MULTICAST -j DROP
iptables -A INPUT -d $MULTICAST -j DROP

# any established or related conns are welcome
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Loopback
iptables -A INPUT -i lo -j ACCEPT

# Statistics and auths for customers, ping tests
#for net_ips in $NETWORK; do

iptables -A INPUT -p icmp -i $IN --icmp-type echo-request -j ACCEPT
iptables -A INPUT -p icmp -i $OUT --icmp-type echo-request -j ACCEPT

#done

############ Открываем нужные нам порты.


# postfix
iptables -A INPUT -p tcp --dport 25 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 143 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 110 -m state --state NEW -j ACCEPT

# PASSIVE FTP
iptables -t filter -A INPUT -p tcp -m tcp --dport 50000:50500 -m state --state NEW -j ACCEPT
iptables -t filter -A INPUT -p udp -m udp --dport 50000:50500 -m state --state NEW -j ACCEPT
# APACHE
iptables -A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 8001 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 81 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -m state --state NEW -j ACCEPT

# SSH 
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT

# TeamSpeak 
iptables -A INPUT -p tcp --dport 9987 -j ACCEPT
iptables -A INPUT -p udp --dport 9987 -j ACCEPT

# ircd
iptables -A INPUT -p tcp --dport 6667 -j ACCEPT
#iptables -A INPUT -p udp --dport 6667 -j ACCEPT

# 137
iptables -A INPUT -i $OUT -p udp --dport 137 -j DROP
iptables -A INPUT -i $OUT -p udp --sport 137 -j DROP

#rsyslog
iptables -A INPUT -i $OUT -p udp --dport 514 -j DROP
iptables -A INPUT -i $IN -p udp --dport 514 -j ACCEPT
iptables -A INPUT -i $OUT -p tcp --dport 514 -j DROP
iptables -A INPUT -i $IN -p tcp --dport 514 -j ACCEPT

# NAMED 
iptables -A INPUT -p udp --dport 53 -j ACCEPT
iptables -A INPUT -p tcp --dport 53 -j ACCEPT

# DHCPD 
iptables -A INPUT -i $IN -p udp --dport 67 -m state --state NEW -j ACCEPT
iptables -A INPUT -i $IN -p udp --dport 68 -m state --state NEW -j ACCEPT
# TFTP 
iptables -A INPUT -i $IN -p udp --dport 69 -m state --state NEW -j ACCEPT
# OPENVPN 
iptables -A INPUT -p tcp --dport 1194 -j ACCEPT
iptables -A INPUT -p udp --dport 1194 -j ACCEPT
iptables -A INPUT -i tun+ -j ACCEPT
# SAMBA 
iptables -A INPUT -p tcp -i $IN  --dport 139 -j ACCEPT
iptables -A INPUT -p tcp -i $IN --dport 445 -j ACCEPT
iptables -A INPUT -p udp -i $IN --dport 137:138 -j ACCEPT
iptables -A INPUT -p udp -i $IN --dport 4011 -j ACCEPT

#ventrillo
iptables -A INPUT -p tcp --dport 3784 -j ACCEPT
iptables -A INPUT -p udp --dport 3784 -j ACCEPT

# MYSQL
iptables -A INPUT -i $IN -p tcp --dport 3306 -j ACCEPT
iptables -A INPUT -i $OUT -p tcp --dport 3306 -s 10.10.10.10 -j ACCEPT

#pgsql
iptables -A INPUT -i $IN -p tcp --dport 5432 -j ACCEPT

iptables -A INPUT -p tcp --dport 48990 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 4899 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp -s 195.140.178.90 --dport 4949 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 1080 -m state --state NEW -j ACCEPT

iptables -A INPUT -p tcp -s 10.10.10.10 --dport 3128 -m state --state NEW -j ACCEPT

#dlna
iptables -A INPUT -i $IN -p tcp --dport 8200 -j ACCEPT
iptables -A INPUT -i $IN -p udp --dport 1900 -j ACCEPT
iptables -A INPUT -i $IN -p udp --dport 59376 -j ACCEPT
iptables -A INPUT -i $IN -p tcp --dport 4044 -j ACCEPT

####

# btsync
iptables -A INPUT -p tcp --dport 3456 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 3457 -m state --state NEW -j ACCEPT

#MUNIN
iptables -A INPUT -p tcp -i lo --dport 4949 -j ACCEPT
iptables -A INPUT -p tcp -i lo --dport 161 -j ACCEPT
# time
iptables -A INPUT -m state --state NEW -p tcp --dport 25565 -j ACCEPT
iptables -A INPUT -m state --state NEW -p udp --dport 25565 -j ACCEPT

iptables -A INPUT -p udp --dport 123 -j ACCEPT

iptables -A INPUT -p tcp --dport 25565 -j ACCEPT

# nc
iptables -A INPUT -p tcp --dport 12345 -m state --state NEW -j ACCEPT
iptables -A INPUT -p udp --dport 12345 -j ACCEPT

# Mumble
iptables -A INPUT -p tcp --dport 64738 -m state --state NEW -j ACCEPT
iptables -A INPUT -p udp --dport 64738 -m state --state NEW -j ACCEPT

# ipv6 accept
iptables -A INPUT -j ACCEPT --proto 41


########### OUTPUT

iptables -A OUTPUT -p icmp --icmp-type timestamp-reply -j DROP
iptables -A OUTPUT -p tcp --dport 4949 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p tcp --dport 161 -m state --state NEW -j ACCEPT

##

########### NAT Вписываем сюда IP своих компьютеров в локальной сети.

iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o $OUT -j MASQUERADE

# hack4
#iptables -t nat -A PREROUTING -s 10.10.10.6 -i tun1 -p tcp --dport 80  -j DNAT --to-destination 192.168.0.19:8080
#iptables -t nat -A POSTROUTING -o tun1 -s 10.10.10.6 -d 192.168.0.1 -j MASQUERADE
#iptables -t nat -A PREROUTING -i tun1 -p tcp -j REDIRECT --to-port 8080
#iptables -t nat -A PREROUTING -i tun0 -p tcp -j DNAT --to-destination 192.168.0.19:8080
#iptables -t nat -A PREROUTING -s 10.10.10.6 -p tcp --dport 80  -j DNAT --to-destination 192.168.0.19
#iptables -t nat -A PREROUTING -s 10.10.10.6 -p tcp -m multiport --dports 80,443 -j DNAT --to-destination 192.168.0.19:8080


#openvpn nat
iptables -t nat -A POSTROUTING -s 10.10.10.0/24 -o $OUT -j MASQUERADE #works

#pptpd nat
#iptables -t nat -A POSTROUTING -s 192.168.0.170 -o $OUT -j MASQUERADE
#iptables -t nat -A POSTROUTING -s 192.167.0.171 -o $OUT -j MASQUERADE

# wlan device
#iptables -t nat -A POSTROUTING -s 192.168.0.169 -o $OUT -j MASQUERADE


############ PORT FORWARD Сюда вписываем проброс портов локальную сеть.

#### uTorrent port forward
#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 37535 -j DNAT --to-destination 192.168.0.6:37535
#iptables -t filter -A FORWARD -i $OUT -d 192.168.0.6 -p tcp --dport 37535 -j ACCEPT

#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 21 -j DNAT --to-destination 192.168.0.19:21
#iptables -t filter -A FORWARD -i $OUT -d 192.168.0.19 -p tcp --dport 21 -j ACCEPT

#i2p
#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 16906 -j DNAT --to-destination 192.168.0.2:16906
#iptables -t filter -A FORWARD -i $OUT -d 192.168.0.2 -p tcp --dport 16906 -j ACCEPT

#local rtorrent
#iptables -A INPUT -p udp --dport 10000 -j ACCEPT
iptables -A INPUT -p tcp --dport 10000 -j ACCEPT
iptables -A INPUT -p udp --dport 6881 -j ACCEPT
#iptables -A INPUT -p tcp --dport 6881 -j ACCEPT

####
# FTP
#iptables -A INPUT -p tcp --dport 21 -m state --state NEW -j ACCEPT

FTPHOST="192.168.0.144"
iptables -t nat -A PREROUTING  -p tcp  --dport 20 -j DNAT --to $FTPHOST:20
iptables -t nat -A PREROUTING  -p tcp  --dport 21 -j DNAT --to $FTPHOST:21
#iptables -t nat -A PREROUTING  -p tcp  --dport 1024:65535 -j DNAT --to $FTPHOST:1024-65535
iptables -A FORWARD -s $FTPHOST -p tcp --sport 20 -j ACCEPT
iptables -A FORWARD -s $FTPHOST -p tcp --sport 21 -j ACCEPT
#iptables -A FORWARD -s $FTPHOST -p tcp --sport 1024:65535 -j ACCEPT


#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 8022 -j DNAT --to-destination 192.168.0.19:22
#iptables -t filter -A FORWARD -i $OUT -d 192.168.0.19 -p tcp --dport 8022 -j ACCEPT

###################################### FAYNO
#### Fayno jabber port forward
#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 5222  -j DNAT --to-destination 10.10.10.6:5222
#iptables -t filter -A FORWARD -i $OUT -o $VPNDEV -d 10.10.10.6 -p tcp --dport 5222 -j ACCEPT
#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 5223 -j DNAT --to-destination 10.10.10.6:5223
#iptables -t filter -A FORWARD -i $OUT -o $VPNDEV -d 10.10.10.6 -p tcp --dport 5223 -j ACCEPT
#iptables -t nat -A POSTROUTING -s 10.10.10.6 -o $OUT -j MASQUERADE
####

#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 5900 -j DNAT --to-destination 192.168.0.2:5900
#iptables -t filter -A FORWARD -i $OUT -d 192.168.0.2 -p tcp --dport 5900 -j ACCEPT
##################################### /FAYNO

#### Radmin port forward
#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 4899 -j DNAT --to-destination 192.168.0.6:4899
#iptables -A FORWARD -i $OUT -d 192.168.0.6 -p tcp --dport 4899 -j ACCEPT
####
#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 48991 -j DNAT --to-destination 192.168.0.6:4899 
#iptables -A FORWARD -i $OUT -d 192.168.0.6  -p tcp --dport 48991 -j ACCEPT
####

##################################### Blizzard downloader port forward
#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 3724 -j DNAT --to-destination 192.168.0.2:3724
#iptables -t filter -A FORWARD -i $OUT -d 192.168.0.2 -p tcp --dport 3724 -j ACCEPT
#iptables -t nat -A PREROUTING -p tcp -d $OUTADDR --dport 6112 -j DNAT --to-destination 192.168.0.2:6112
#iptables -t filter -A FORWARD -i $OUT -d 192.168.0.2 -p tcp --dport 6112 -j ACCEPT


#iptables -t nat -A PREROUTING -p tcp -i tun1 --dport 80 -j DNAT --to-destination 192.168.0.2:8888
#iptables -t filter -A FORWARD -i tun1 -d 192.168.0.2 -p tcp --dport 8888 -j ACCEPT
#iptables -t nat -A PREROUTING -p tcp -i tun1 --dport 443 -j DNAT --to-destination 192.168.0.2:8888
#iptables -t filter -A FORWARD -i tun1 -d 192.168.0.2 -p tcp --dport 8888 -j ACCEPT


# moswar cheats 
#iptables -t nat -A PREROUTING -d moswar.onlinebots.net -p tcp --dport 80  -j DNAT --to-destination 192.168.0.1

echo "...done"

echo "--> IPTABLES firewall loaded/activated <--"

##--------------------------------End Firewall---------------------------------##

;;
*)
echo "Usage: firewall (start|stop|restart|status) EXTIF INTIF"
exit 1
esac

exit 0